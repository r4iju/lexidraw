# Stage 1: Builder - Installs dependencies, yt-dlp, and builds the application
FROM oven/bun:alpine AS builder

WORKDIR /usr/src/app

# Install system dependencies: python3, ffmpeg, and yt-dlp
RUN apk add --no-cache python3 ffmpeg yt-dlp

# Copy root package.json and lockfile
COPY package.json bun.lock* ./
COPY turbo.json ./

# Create directories for packages and apps to ensure COPY commands work as expected
# This helps Docker cache layers effectively if only specific package.json files change
RUN mkdir -p packages/env packages/drizzle packages/types apps/media-downloader

# Copy package.json files for the app and its direct workspace dependencies
COPY apps/media-downloader/package.json ./apps/media-downloader/
COPY packages/env/package.json ./packages/env/
COPY packages/drizzle/package.json ./packages/drizzle/
COPY packages/types/package.json ./packages/types/

# Install dependencies for the entire workspace.
# --production=false is removed; omitting --production installs all dependencies (including devDependencies)
# which might be needed for the build step.
RUN bun install # --frozen-lockfile

# Copy source code for the app and its workspace dependencies
# This comes after bun install to leverage Docker layer caching for dependencies
COPY apps/media-downloader/src ./apps/media-downloader/src
COPY apps/media-downloader/tsconfig.json ./apps/media-downloader/

COPY packages/env/src ./packages/env/src
COPY packages/env/tsconfig.json ./packages/env/

COPY packages/drizzle/src ./packages/drizzle/src
COPY packages/drizzle/tsconfig.json ./packages/drizzle/

COPY packages/types/src ./packages/types/src
COPY packages/types/tsconfig.json ./packages/types/

# Build the media-downloader application using turbo for better monorepo support
RUN bunx turbo run build --filter=@apps/media-downloader


# --- Stage 2: Final - Creates the lean production image ---
FROM oven/bun:alpine AS final

WORKDIR /app

RUN apk add --no-cache python3 ffmpeg

# Copy installed yt-dlp binary from the builder stage
# yt-dlp installed via apk is typically in /usr/bin/
COPY --from=builder /usr/bin/yt-dlp /usr/bin/yt-dlp

# Copy the built application from the builder stage
COPY --from=builder /usr/src/app/apps/media-downloader/dist ./dist

# Set environment variables
ENV NODE_ENV=production
ENV MEDIA_DOWNLOADER_PORT=3003
# Other ENV VARS (S3 keys, SHARED_KEY, DB_URL, etc.) should be injected at runtime

# Expose the application port
EXPOSE ${MEDIA_DOWNLOADER_PORT}

# Command to run the built application
# Assumes the main output of 'bun build' is 'dist/index.js'
CMD ["bun", "dist/index.js"] 